// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "backend/domain"

	mock "github.com/stretchr/testify/mock"
)

// EncryptionServiceInterface is an autogenerated mock type for the EncryptionServiceInterface type
type EncryptionServiceInterface struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: value
func (_m *EncryptionServiceInterface) Decrypt(value string) (string, *domain.CustomError) {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 string
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) (string, *domain.CustomError)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *domain.CustomError); ok {
		r1 = rf(value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: value
func (_m *EncryptionServiceInterface) Encrypt(value string) (string, *domain.CustomError) {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) (string, *domain.CustomError)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *domain.CustomError); ok {
		r1 = rf(value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// NewEncryptionServiceInterface creates a new instance of EncryptionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncryptionServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EncryptionServiceInterface {
	mock := &EncryptionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
