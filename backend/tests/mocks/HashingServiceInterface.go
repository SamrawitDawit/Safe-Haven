// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "backend/domain"

	mock "github.com/stretchr/testify/mock"
)

// HashingServiceInterface is an autogenerated mock type for the HashingServiceInterface type
type HashingServiceInterface struct {
	mock.Mock
}

// CheckPasswordHash provides a mock function with given fields: hashedPassword, password
func (_m *HashingServiceInterface) CheckPasswordHash(hashedPassword string, password string) *domain.CustomError {
	ret := _m.Called(hashedPassword, password)

	if len(ret) == 0 {
		panic("no return value specified for CheckPasswordHash")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string, string) *domain.CustomError); ok {
		r0 = rf(hashedPassword, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// HashPassword provides a mock function with given fields: password
func (_m *HashingServiceInterface) HashPassword(password string) (string, *domain.CustomError) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) (string, *domain.CustomError)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *domain.CustomError); ok {
		r1 = rf(password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// NewHashingServiceInterface creates a new instance of HashingServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashingServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashingServiceInterface {
	mock := &HashingServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
