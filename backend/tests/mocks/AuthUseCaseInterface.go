// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "backend/domain"
	dto "backend/usecases/dto"

	mock "github.com/stretchr/testify/mock"
)

// AuthUseCaseInterface is an autogenerated mock type for the AuthUseCaseInterface type
type AuthUseCaseInterface struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: email
func (_m *AuthUseCaseInterface) ForgotPassword(email string) *domain.CustomError {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) *domain.CustomError); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// HandleGoogleCallback provides a mock function with given fields: user
func (_m *AuthUseCaseInterface) HandleGoogleCallback(user *domain.User) (*domain.User, string, string, *domain.CustomError) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for HandleGoogleCallback")
	}

	var r0 *domain.User
	var r1 string
	var r2 string
	var r3 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*domain.User) (*domain.User, string, string, *domain.CustomError)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) *domain.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.User) string); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*domain.User) string); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(*domain.User) *domain.CustomError); ok {
		r3 = rf(user)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*domain.CustomError)
		}
	}

	return r0, r1, r2, r3
}

// Login provides a mock function with given fields: loginDTO
func (_m *AuthUseCaseInterface) Login(loginDTO dto.LoginDTO) (*domain.User, string, string, *domain.CustomError) {
	ret := _m.Called(loginDTO)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.User
	var r1 string
	var r2 string
	var r3 *domain.CustomError
	if rf, ok := ret.Get(0).(func(dto.LoginDTO) (*domain.User, string, string, *domain.CustomError)); ok {
		return rf(loginDTO)
	}
	if rf, ok := ret.Get(0).(func(dto.LoginDTO) *domain.User); ok {
		r0 = rf(loginDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.LoginDTO) string); ok {
		r1 = rf(loginDTO)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(dto.LoginDTO) string); ok {
		r2 = rf(loginDTO)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(dto.LoginDTO) *domain.CustomError); ok {
		r3 = rf(loginDTO)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*domain.CustomError)
		}
	}

	return r0, r1, r2, r3
}

// RefreshToken provides a mock function with given fields: refreshToken
func (_m *AuthUseCaseInterface) RefreshToken(refreshToken string) (string, string, *domain.CustomError) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 string
	var r2 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) (string, string, *domain.CustomError)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) *domain.CustomError); ok {
		r2 = rf(refreshToken)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*domain.CustomError)
		}
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: registerDTO
func (_m *AuthUseCaseInterface) Register(registerDTO dto.RegisterDTO) (*domain.User, *domain.CustomError) {
	ret := _m.Called(registerDTO)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *domain.User
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(dto.RegisterDTO) (*domain.User, *domain.CustomError)); ok {
		return rf(registerDTO)
	}
	if rf, ok := ret.Get(0).(func(dto.RegisterDTO) *domain.User); ok {
		r0 = rf(registerDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.RegisterDTO) *domain.CustomError); ok {
		r1 = rf(registerDTO)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: token, newPassword
func (_m *AuthUseCaseInterface) ResetPassword(token string, newPassword string) *domain.CustomError {
	ret := _m.Called(token, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string, string) *domain.CustomError); ok {
		r0 = rf(token, newPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// NewAuthUseCaseInterface creates a new instance of AuthUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUseCaseInterface {
	mock := &AuthUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
